<!DOCTYPE html>
<html lang="en">
<!-- Head partial -->
<%- include("partials/_head", {page: "Geo"}) %>
<body>
  <!-- Nav Partial -->
  <%- include("partials/_nav") %>

  <!-- Security Classification -->
  <%- include("partials/_security_classification", {classification: "Unclassified"}) %>
  
  <!-- Geo Content -->
  <div id="map" class="map"></div>

<!-- View Specific Scripts -->
<!-- Turf - Geospatial Analysis -->
<script type="text/javascript" src="js/turf.min.js"></script>
<!-- Leaflet - Geospatial Layer -->
<script type="text/javascript" src="js/leaflet/leaflet.js"></script>
<link rel="stylesheet" type="text/css" href="js/leaflet/leaflet.css">
<!-- Leaflet Clustering -->
<script type="text/javascript" src="js/leaflet/leaflet.markercluster.js"></script>
<link rel="stylesheet" type="text/css" href="js/leaflet/MarkerCluster.css">
<link rel="stylesheet" type="text/css" href="js/leaflet/MarkerCluster.Default.css">
<!-- Leaflet Measure -->
<script type="text/javascript" src="js/leaflet/Leaflet.PolylineMeasure.js"></script>
<link rel="stylesheet" type="text/css" href="js/leaflet/Leaflet.PolylineMeasure.css">
<!-- Screenshots -->
<script type="text/javascript" src='js/leaflet/bundle.js'></script>
<!-- Leaflet Search -->
<script type="text/javascript" src="js/leaflet/leaflet-search.js"></script>
<link rel="stylesheet" type="text/css" href="js/leaflet/leaflet-search.css">

<!-- L E A F L E T   I N I T -->

<!-- Convert EJS var to js -->
<% const reports = records %>
<script type="text/javascript">

  // C O L L E C T   V A R S 

  // Import reports from EJS
  const records = <%- JSON.stringify(records) %>;

  // Color array to style marker icons 
  const colors = ['red', 'blue', 'green', 'yellow', 'orange', 'brown', 'cyan', 'purple', 'white', 'gold', 'pink']

  // Unique Event types
  const uniqueEventTypes = [];
  // Add each unique event
  records.forEach(record => {
    if (!uniqueEventTypes.includes(record.event_type)){
      uniqueEventTypes.push(record.event_type)
    }
  })

  // I N I T   L E A F L E T

  // Init a new map object
  const map = L.map('map', {  preferCanvas: true })

  // If you elect to use an icon do so here
  // Create a new icon style
  const sigactIcon = L.icon({
    iconUrl: 'img/bxs-map.svg',
    iconSize: [32, 32],
    shadowSize: [50, 64],
    shadowAnchor: [4, 62],
  })

  // Add OSM map
  L.tileLayer('https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png', {
    // If your map has an access token/api key enter it here
    // accessToken: 'my-key'
  }).addTo(map)

  // Create a layer group
  const pointLayer = L.markerClusterGroup({ maxClusterRadius: 100 });

  // S T A R T   M A R K E R   G E N E R A T I O N
  Object.keys(records).forEach(record => {

    // Assign short var name
    const rR = records[record];

    // Create virtual table rows
    const tBodyRows = Object.keys(rR).map((field, index) => `<tr><td class="p-1 geo-table ${index % 2 ? "off-row" : ""}"><strong>${field.toUpperCase().replace(/_/g, ' ')}</strong>: ${rR[field]}</td></tr>`)

    // Set time from timestamp
    tBodyRows[21] = tBodyRows[21].replace(/\d{10}/, new Date(tBodyRows[21].match(/\d{10}/) * 1000))

    // Event color
    const color = colors[uniqueEventTypes.indexOf(rR.event_type)];
    // Create the sigact circle marker
    L.circleMarker([rR.latitude, rR.longitude], { 
      // Radius == meters
      title: rR.id,
      radius: 10,
      color: 'white',
      fillOpacity: .9,
      riseOnHover: true,
      fillColor: color,
      weight: 2
     })
    // Add it to the map
    .addTo(pointLayer)
    // Add a popup
    .bindPopup(`
    <table class="geo-table">
      <thead class="thead-dark">
        <td class="text-center">
          <strong>Point Data</strong>
        </td>
      </thead>
    <tbody>${tBodyRows.join('')}</tbody>
    </table>`, { maxWidth: 750 })
    .bindTooltip(`
    <table class="geo-table-popup">
      <thead class="thead-dark">
        <td class="text-center">
          <small>Point Data</small>
        </td>
      </thead>
    <tbody>${tBodyRows.join('')}</tbody>
    </table>`, { sticky: true, opacity: .7 })
  })

  // E N D S   M A R K E R   G E N E R A T I O N

  // Finally add the points to the map
  pointLayer.addTo(map)

  // And zoom to it :)
  map.fitBounds(pointLayer.getBounds().pad(0.5));

  // Add a scalebar
  L.control.scale({ metric: true, maxWidth: 200, opacity: 1 }).addTo(map);

  // Measure
  L.control.polylineMeasure({
    position:'topleft',
    unit:'metres',
    showBearings:true,
    clearMeasurementsOnStop: false,
    showClearControl: true,
    showUnitControl: true
  }
  ).addTo(map);

  const tD = new Date();
  const dateString = `${tD.getUTCDate()}-${tD.getUTCMonth()}`;

  // Save screenshot
  const currentView = { 
    width: $("#map").width(),
     name: 'Current View',
     height: $("#map").height(),
     className: 'geoCurrentXY',
     tooltip: 'Current View Port'
  }

  L.easyPrint({
    title: 'Print Map',
    position: 'topleft',
    exportOnly: true,
    hideControlContainer: false,
    hideClasses: ['leaflet-control-container'],
    filename: `TAS-Map-Export-${dateString}`,
    sizeModes: ['A4Portrait', 'A4Landscape', currentView]
  }).addTo(map);

  // Legend
  const legend = L.control();

  legend.onAdd = function (map) {
      this._div = L.DomUtil.create('div', 'legend p-3');
      this._div.innerHTML = `
        <h6>Legend</h6>
        ${uniqueEventTypes.map((event, index) => `
            <span class="geo-dot" style="background-color: ${colors[index]}"class="dot"></span>&nbsp;&nbsp;&nbsp;${event}
          <br>
        `).join('')}
      `
      return this._div;
  };

  legend.addTo(map);

  // Search
  map.addControl( new L.Control.Search({ layer: pointLayer }) )

 
</script>
</body>
</html>
